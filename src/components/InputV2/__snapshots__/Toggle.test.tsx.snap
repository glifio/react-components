// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Toggle input it renders the off state correctly 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  gap: 10px;
  text-align: left;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c0 > *:first-child {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 > *:last-child:not(.toggle-wrapper) {
  -webkit-flex: 0 0 50%;
  -ms-flex: 0 0 50%;
  flex: 0 0 50%;
}

.c0 span.info,
.c0 span.error {
  font-size: 0.875rem;
}

.c0 span.error {
  color: var(--red-medium);
}

.c0 .button-wrapper {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  gap: 10px;
}

.c0 .button-wrapper > *:first-child {
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
}

.c0 .button-wrapper > *:not(:first-child) {
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-transition: -webkit-transform 0.1s ease-out;
  -webkit-transition: transform 0.1s ease-out;
  transition: transform 0.1s ease-out;
}

.c0 .button-wrapper > *:not(:first-child):hover:not(:active) {
  -webkit-transform: scale(1.2);
  -ms-transform: scale(1.2);
  transform: scale(1.2);
}

.c0 .button-wrapper > *:not(:first-child):active {
  -webkit-transition: none;
  transition: none;
}

.c0 .unit-wrapper {
  position: relative;
}

.c0 .unit-wrapper input {
  width: 100%;
}

.c0 .unit-wrapper .unit {
  position: absolute;
  top: 50%;
  right: 1em;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  color: var(--purple-medium);
}

.c0 .select-wrapper {
  position: relative;
}

.c0 .select-wrapper select {
  width: 100%;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}

.c0 .select-wrapper .select-arrow {
  position: absolute;
  pointer-events: none;
  top: 50%;
  right: 1.2em;
  width: 0.6em;
  height: 0.6em;
  border-right: 1.5px solid var(--black);
  border-bottom: 1.5px solid var(--black);
  -webkit-transform: translateY(-0.35em) rotate(45deg);
  -ms-transform: translateY(-0.35em) rotate(45deg);
  transform: translateY(-0.35em) rotate(45deg);
}

.c1 .toggle-wrapper {
  position: relative;
}

.c1 input {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  opacity: 0;
}

.c1 .toggle {
  display: inline-block;
  position: relative;
  width: 2.25em;
  height: 1.5em;
  border-radius: 0.75em;
  border: 2px solid var(--blue-medium);
  background-color: var(--blue-medium);
}

.c1 .toggle::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: calc(1.5em - 4px);
  height: calc(1.5em - 4px);
  border-radius: 50%;
  background-color: var(--white);
}

.c1 input:checked ~ .toggle {
  border-color: var(--blue-dark);
  background-color: var(--blue-dark);
}

.c1 input:checked ~ .toggle::after {
  left: auto;
  right: 0;
}

<label
  class="c0 c1"
>
  <div>
    <span>
      Turn me on or off
    </span>
    <span
      class="info"
    >
      And see what it does
    </span>
  </div>
  <div
    class="toggle-wrapper"
  >
    <input
      type="checkbox"
    />
    <span
      class="toggle"
    />
  </div>
</label>
`;

exports[`Toggle input it renders the on state correctly 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  gap: 10px;
  text-align: left;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c0 > *:first-child {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 > *:last-child:not(.toggle-wrapper) {
  -webkit-flex: 0 0 50%;
  -ms-flex: 0 0 50%;
  flex: 0 0 50%;
}

.c0 span.info,
.c0 span.error {
  font-size: 0.875rem;
}

.c0 span.error {
  color: var(--red-medium);
}

.c0 .button-wrapper {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  gap: 10px;
}

.c0 .button-wrapper > *:first-child {
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
}

.c0 .button-wrapper > *:not(:first-child) {
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-transition: -webkit-transform 0.1s ease-out;
  -webkit-transition: transform 0.1s ease-out;
  transition: transform 0.1s ease-out;
}

.c0 .button-wrapper > *:not(:first-child):hover:not(:active) {
  -webkit-transform: scale(1.2);
  -ms-transform: scale(1.2);
  transform: scale(1.2);
}

.c0 .button-wrapper > *:not(:first-child):active {
  -webkit-transition: none;
  transition: none;
}

.c0 .unit-wrapper {
  position: relative;
}

.c0 .unit-wrapper input {
  width: 100%;
}

.c0 .unit-wrapper .unit {
  position: absolute;
  top: 50%;
  right: 1em;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  color: var(--purple-medium);
}

.c0 .select-wrapper {
  position: relative;
}

.c0 .select-wrapper select {
  width: 100%;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}

.c0 .select-wrapper .select-arrow {
  position: absolute;
  pointer-events: none;
  top: 50%;
  right: 1.2em;
  width: 0.6em;
  height: 0.6em;
  border-right: 1.5px solid var(--black);
  border-bottom: 1.5px solid var(--black);
  -webkit-transform: translateY(-0.35em) rotate(45deg);
  -ms-transform: translateY(-0.35em) rotate(45deg);
  transform: translateY(-0.35em) rotate(45deg);
}

.c1 .toggle-wrapper {
  position: relative;
}

.c1 input {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  opacity: 0;
}

.c1 .toggle {
  display: inline-block;
  position: relative;
  width: 2.25em;
  height: 1.5em;
  border-radius: 0.75em;
  border: 2px solid var(--blue-medium);
  background-color: var(--blue-medium);
}

.c1 .toggle::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: calc(1.5em - 4px);
  height: calc(1.5em - 4px);
  border-radius: 50%;
  background-color: var(--white);
}

.c1 input:checked ~ .toggle {
  border-color: var(--blue-dark);
  background-color: var(--blue-dark);
}

.c1 input:checked ~ .toggle::after {
  left: auto;
  right: 0;
}

<label
  class="c0 c1"
>
  <div>
    <span>
      Turn me on or off
    </span>
    <span
      class="info"
    >
      And see what it does
    </span>
  </div>
  <div
    class="toggle-wrapper"
  >
    <input
      checked=""
      type="checkbox"
    />
    <span
      class="toggle"
    />
  </div>
</label>
`;
